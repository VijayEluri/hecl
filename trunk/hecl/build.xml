<project name="Hecl" default="build" basedir=".">
  <description>
    Hecl build file.
  </description>
  <!--
  additional properties are read from "build.properties" file
  which can be created as machine-dependant parameters.
  -->
  <property file="build.properties"/>

  <!-- General WTk settings -->
  <property name="wtk.home" value="/opt/WTK2.2"/>

  <!-- Specifies the version of MIDP to use. 	2.0+ -->
  <!-- default: 1.0 -->
  <property name="wtk.cldc.version" value="1.1"/>

  <!-- Specifies the version of MIDP to use. 	2.0+ -->
  <!-- default: 2.0 for WTK 2.x, 1.0 otherwise -->
  <property name="wtk.midp.version" value="2.0"/>

  <!-- Enables or disables the Multimedia API (MMAPI). 	        2.0+ -->
  <!-- default: false -->
  <property name="wtk.mmapi.enabled" value="false"/>

  <!--Enables or disables the Wireless Messaging API (WMA). 	2.0+ -->
  <!-- default: false -->
  <property name="wtk.wma.enabled" value="false"/>

  <!-- nables or disables the J2ME Web Services API (J2MEWS). 	2.1+ -->
  <!-- default: false -->
  <property name="wtk.j2mews.enabled" value="false"/>

  <!-- Enables or disables the J2ME Bluetooth API (JSR-82). 	2.2+ -->
  <!-- default: false -->
  <property name="wtk.bluetooth.enabled" value="false"/>

  <!-- Enables or disables the J2ME 3D API (JSR-184). 	        2.2+ -->
  <!-- default: false -->
  <property name="wtk.java3d.enabled" value="false"/>

  <!-- Enables or disables the J2ME optional PDA packages (JSR-75). 	2.2+ -->
  <!-- default: false -->
  <property name="wtk.optionalpda.enabled" value="false"/>

  <!--
  Sets a totally custom BOOTCLASSPATH. Use this property
  if the set of APIs you need is not covered by the above properties (for
  example because you are using the system libraries provided another vendor
  or you have some important additional libraries). 	1.0+ 
  -->
  <!-- default: varies -->
  <!--<property name="wtk.midpapi" value=""/>-->

  <taskdef resource="antenna.properties" classpath="build-tools/antenna-bin-0.9.13.jar"/>
  <!-- <taskdef resource="antenna.properties"/> -->

  <!-- properties for the build base directorries -->
  <property name="j2se.build" value="build/j2se/final"/>
  <property name="j2se.pre" value="build/j2se/pre/all"/>

  <property name="j2me.build" value="build/j2me/final/${wtk.cldc.version}"/>
  <property name="j2me.pre" value="build/j2me/pre/${wtk.cldc.version}"/>
  <property name="cldc" value="cldc${wtk.cldc.version}"/>

  <path id="coreclasspath">
    <pathelement location="${j2se.build}/core"/>
  </path>
  <path id="httpclasspath">
    <pathelement location="${j2se.build}/http"/>
  </path>
  <path id="filesclasspath">
    <pathelement location="${j2se.build}/files"/>
  </path>
  <path id="loadclasspath">
    <pathelement location="${j2se.build}/load"/>
  </path>

  <!-- J2ME stuff -->
  <property name="j2me.app" value="Hecl"/>
  <property name="j2me.appversion" value="1.01"/>
  <property name="j2me.entryclass" value="Hecl"/>
  <property name="j2me.vendor" value="dedasys.com"/>

  <property name="j2me.coreclasspath" value="${j2me.build}"/>
  <path id="j2me.coreclasspath">
    <pathelement location="${j2me.coreclasspath}"/>
  </path>
  <property name="j2me.httpclasspath" value="${j2me.build}/http"/>
  <path id="j2me.httpclasspath">
    <pathelement location="${j2me.httpclasspath}"/>
  </path>
  <property name="j2me.rmsclasspath" value="${j2me.build}/rms"/>
  <path id="j2me.rmsclasspath">
    <pathelement location="${j2me.rmsclasspath}"/>
  </path>
  <!--
  Additional classpath locations, specified in build.properties file
  -->
  <path id="classpath">
  </path>

  <target name="showenv">
    <exec executable="/usr/bin/env">
      </exec>
  </target>

  <!-- virtual targets -->
  <target name="clean" description="Clean the build"
    depends="cleanOut,cleanBuild,cleanClasses">
    <delete file="Hecl.jar"/>
    <delete file="JarHack.jar"/>
    <delete file="HeclBuilder.jar"/>
    <delete file="StandaloneHecl.jar"/>
  </target>

  <target name="build" description="Complete build"
    depends="compile,package"/>

  <target name="compile" description="Complete everything"
    depends="compileCore,compileCommandline,compileApplet"/>

  <target name="package" description="Package things into JARs"
    depends="packageJARs,packageApplet,HeclBuilderJar"/>

  <!-- clean targets -->
  <target name="cleanOut" description="Clean out directory">
    <delete dir="out"/>
  </target>
  <target name="cleanBuild" description="Clean build files">
    <delete dir="${j2se.build}"/>
    <delete dir="${j2me.build}"/>
  </target>
  <target name="cleanClasses" description="Clean Eclipse classes files">
    <delete dir="classes"/>
  </target>


  <!-- compile targets -->
  <target name="initCompile" description="Initialize compilation">
    <mkdir dir="build" />
    <mkdir dir="${j2se.build}" />
    <mkdir dir="${j2se.pre}" />
    <mkdir dir="${j2me.build}" />
    <mkdir dir="${j2me.pre}" />
  </target>

  <target name="compileCore"
    depends="initCompile"
    description="Compile core Hecl functionality">
    <mkdir dir="${j2se.build}/core" />
    <mkdir dir="${j2se.pre}/core"/>

    <wtkpreprocess srcdir="core" destdir="${j2se.pre}/core" symbols="ant:j2se"/>
    <javac srcdir="${j2se.pre}/core" destdir="${j2se.build}/core" debug="true">
      <classpath refid="classpath"/>
    </javac>
  </target>

  <target name="compileApplet"
    depends="initCompile,compileCore"
    description="Compile Hecl applet">
    <mkdir dir="${j2se.build}/applet"/>
    <javac srcdir="applet"
     destdir="${j2se.build}/applet"
     debug="true"
     >
     <classpath refid="coreclasspath"/>
     <classpath refid="classpath"/>
    </javac>
  </target>

  <target name="compileFiles"
    depends="initCompile,compileCore"
    description="Compile Hecl files support">
    <mkdir dir="${j2se.build}/files"/>
    <javac srcdir="files"
     destdir="${j2se.build}/files"
     debug="true"
     >
      <classpath refid="coreclasspath"/>
      <classpath refid="classpath"/>
    </javac>
  </target>

  <target name="compileLoad"
    depends="initCompile,compileCore"
    description="Compile Hecl load (classloader) support">
    <mkdir dir="${j2se.build}/load"/>
    <mkdir dir="${j2se.pre}/load"/>
    <wtkpreprocess srcdir="load" destdir="${j2se.pre}/load"
     symbols="ant:j2se"/>
    <javac srcdir="${j2se.pre}/load"
     destdir="${j2se.build}/load"
     debug="true"
     >
      <classpath refid="coreclasspath"/>
      <classpath refid="filesclasspath"/>
      <classpath refid="classpath"/>
    </javac>
  </target>

  <target name="compileHttp"
    description="Compile J2SE Hecl http support"
    depends="initCompile,compileCore">
    <mkdir dir="${j2se.build}/http"/>
    <mkdir dir="${j2se.pre}/http"/>
    <wtkpreprocess srcdir="http" destdir="${j2se.pre}/http"
     symbols="ant:j2se"/>
    <wtkpreprocess srcdir="http_standard" destdir="${j2se.pre}/http"
     symbols="ant:j2se"/>
    <javac srcdir="${j2se.pre}/http"
     destdir="${j2se.build}/http"
     debug="true">
      <classpath refid="coreclasspath"/>
      <classpath refid="classpath"/>
    </javac>
  </target>

  <target name="compileCommandline"
    description="Compile Hecl command line support"
    depends="initCompile,compileCore,compileFiles,compileHttp,compileLoad">
    <mkdir dir="${j2se.build}/commandline"/>
    <javac srcdir="commandline"
     destdir="${j2se.build}/commandline"
     debug="true">
      <classpath refid="coreclasspath"/>
      <classpath refid="filesclasspath"/>
      <classpath refid="httpclasspath"/>
      <classpath refid="loadclasspath"/>
      <classpath refid="classpath"/>
    </javac>
  </target>

  <target name="packageJarHack">
    <mkdir dir="${j2se.build}/jarhack" />
    <javac srcdir="jarhack" destdir="${j2se.build}/jarhack">
    </javac>
    <jar destfile="JarHack.jar" basedir="${j2se.build}/jarhack">
      <manifest>
	<attribute name="Main-Class" value="$jarhack/JarHack"></attribute>
      </manifest>
    </jar>
  </target>

  <!-- package targets -->
  <target name="initPackage"
    description="Initialized packaging">
    <mkdir dir="out"/>
  </target>

  <!-- Build the command line package.  We first add the core stuff,
  then add the Hecl command line target. -->
  <target name="packageCommandline" description="Create Jar for command line Hecl" depends="compileCommandline,compileHttp">
    <jar destfile="Hecl.jar" basedir="${j2se.build}/core" update="true" />
    <jar destfile="Hecl.jar" basedir="${j2se.build}/files" update="true"/>
    <jar destfile="Hecl.jar" basedir="${j2se.build}/load" update="true"/>
<!--
    <jar destfile="Hecl.jar" basedir="build/float" update="true"/>
-->
    <jar destfile="Hecl.jar" basedir="${j2se.build}/commandline" includes="Hecl.class" update="true">
      <manifest>
        <attribute name="Main-Class" value="Hecl"/>
      </manifest>
    </jar>
  </target>

  <target name="packageStandalone" description="Create Jar for
    standalone Hecl" depends="compileCommandline,compileHttp">
    <jar destfile="StandaloneHecl.jar" basedir="${j2se.build}/core" update="true"/>
    <jar destfile="StandaloneHecl.jar" basedir="${j2se.build}/files" update="true"/>
    <jar destfile="StandaloneHecl.jar" basedir="${j2se.build}/http" update="true"/>
    <jar destfile="StandaloneHecl.jar" basedir="build_j2se/commandline" includes="StandaloneHecl.class" update="true">
      <manifest>
        <attribute name="Main-Class" value="StandaloneHecl"/>
      </manifest>
    </jar>
  </target>

  <target name="packageJARs" description="Create Jar distributions of the sources"
    depends="compile,initPackage">
    <jar destfile="out/heclCore.jar" basedir="build/core"/>
    <jar destfile="out/heclApplet.jar" basedir="build/applet"/>
    <jar destfile="out/heclFiles.jar" basedir="build/files"/>
    <jar destfile="out/heclHttp.jar" basedir="build/http_standard/"/>
    <jar destfile="out/heclLoad.jar" basedir="build/load"/>
  </target>

  <target name="packageApplet" description="Create HTML applet structure"
    depends="initPackage,packageJARs">
    <mkdir dir="out/applet"/>
    <copy file="out/heclCore.jar" tofile="out/applet/heclCore.jar"/>
    <copy file="out/heclApplet.jar" tofile="out/applet/heclApplet.jar"/>
    <copy file="out/heclFiles.jar" tofile="out/applet/heclFiles.jar"/>
<!--     <copy file="out/heclHttp.jar" tofile="out/applet/heclHttp.jar"/> -->
    <copy file="HTML/applet.html" tofile="out/applet/index.html"/>
  </target>



  <!-- J2ME versions -->
  <target name="midlet10" description="Build MIDlet for CLDC-1.0">
   <antcall target="midlet" inheritAll="false">
    <param name="wtk.cldc.version" value="1.0"/>
   </antcall>
  </target>

  <target name="midlet11" description="Build MIDlet for CLDC-1.1">
   <antcall target="midlet" inheritAll="false">
    <param name="wtk.cldc.version" value="1.1"/>
   </antcall>
  </target>

  <target name="compileJ2MECore"
   description="Compile the core classes for J2ME"
   depends="initCompile"
   >
   <mkdir dir="${j2me.build}"/>
   <mkdir dir="${j2me.coreclasspath}" />
   <mkdir dir="${j2me.pre}/core"/>
   <wtkpreprocess srcdir="core"
    symbols="ant:j2me,ant:${cldc}"
    destdir="${j2me.pre}/core"
    verbose="true"
    />
   <wtkbuild srcdir="${j2me.pre}/core" target="1.1" source="1.2"
    verbose="true" debug="true"
    cldc="false"
    destdir="${j2me.coreclasspath}">
    <classpath refid="j2me.coreclasspath"/>
   </wtkbuild>
  </target>

  <target name="compileJ2MErms" description="Compile Hecl RecordStore"
   depends="initCompile,compileJ2MECore"
   >
    <mkdir dir="${j2me.rmsclasspath}"/>
    <mkdir dir="${j2me.pre}/rms"/>
    <wtkpreprocess srcdir="rms" destdir="${j2me.pre}/rms"
     symbols="ant:j2me,ant:${cldc}"/>
    <wtkbuild srcdir="${j2me.pre}/rms"  target="1.1" source="1.2"
     destdir="${j2me.rmsclasspath}">
     <classpath refid="j2me.coreclasspath"/>
    </wtkbuild>
  </target>

  <target name="compileJ2MEHttp"
    depends="initCompile,compileJ2MECore"
    description="Compile J2ME Hecl http support">
    <mkdir dir="${j2me.httpclasspath}"/>
    <mkdir dir="${j2me.pre}/http"/>
    <wtkpreprocess srcdir="http_micro" destdir="${j2me.pre}/http"
     symbols="ant:j2me,ant:${cldc}">
    </wtkpreprocess>
    <wtkpreprocess srcdir="http" destdir="${j2me.pre}/http"
     symbols="ant:j2me,ant:${cldc}">
    </wtkpreprocess>
    <wtkbuild srcdir="${j2me.pre}/http" target="1.1" source="1.2"
     destdir="${j2me.httpclasspath}">
      <classpath refid="j2me.coreclasspath"/>
    </wtkbuild>
  </target>

  <target name="compileJ2ME"
    description="Compile the J2ME specific stuff"
    depends ="compileJ2MECore,compileJ2MEHttp,compileJ2MErms"
    >
<!--
-->
    <mkdir dir="${j2me.build}/stand"/>
    <mkdir dir="${j2me.pre}/stand"/>
    <wtkpreprocess srcdir="j2me" destdir="${j2me.pre}/stand"
     symbols="ant:j2me,ant:${cldc}"/>
    <wtkbuild srcdir="${j2me.pre}/stand" target="1.1" source="1.2"
      destdir="${j2me.build}">
      <classpath refid="j2me.coreclasspath"/>
      <classpath refid="j2me.httpclasspath"/>
      <classpath refid="j2me.rmsclasspath"/>
    </wtkbuild>
  </target>

  <target name="midlet"
   depends="compileJ2ME"
  >
   <wtkjad jadfile="${j2me.build}/${j2me.app}.jad"
     jarfile="${j2me.build}/${j2me.app}.jar"
     name="${j2me.app}"
     version="${j2me.appversion}"
     vendor="${j2me.vendor}"
     >
     <midlet name="${j2me.app}" class="${j2me.entryclass}"/>
     <attribute name="MicroEdition-Profile" value="MIDP-${wtk.midp.version}"/>
     <attribute name="MicroEdition-Configuration" value="CLDC-${wtk.cldc.version}"/>
   </wtkjad>

   <copy file="j2me/script.hcl" todir="${j2me.build}" overwrite="true"/>
   <copy file="j2me/Hecl.png" todir="${j2me.build}" overwrite="true"/>

   <wtkpackage
    basedir="${j2me.build}"
    excludes="pre/**,**jad,**jar"
    
    jarfile="${j2me.build}/${j2me.app}.jar"
    jadfile="${j2me.build}/${j2me.app}.jad"
    cldc="false"
    preverify="true"
    obfuscate="true"
    verbose="true"
    >

    <manifest>
     <attribute name="MIDlet-Name" value="Hecl"/>
     <attribute name="MIDlet-Vendor" value="dedasys"/>
     <attribute name="MIDlet-Version" value="1.1"/>
     <attribute name="MIDlet-Permissions" value="javax.microedition.io.Connector.http"/>
     <!--
     <attribute name="MIDlet-1" value="Hecl, Hecl.png, Hecl"/>
     -->
     <attribute name="MIDlet-Jar-URL" value="Hecl.jar"/>
     <attribute name="MicroEdition-Profile" value="MIDP-${wtk.midp.version}"/>
     <attribute name="MicroEdition-Configuration" value="CLDC-${wtk.cldc.version}"/>
    </manifest>
   </wtkpackage>
  </target>



  <!-- Docs -->
  <target name="javadocs">
    <javadoc packagenames="org.hecl,org.hecl.*,jarhack,heclbuilder"
      destdir="docs/jdocs"
      author="true"
      version="true"
      use="true">
      <sourcepath>
	<pathelement path="core"/>
      </sourcepath>
      <sourcepath>
	<pathelement path="files"/>
      </sourcepath>
      <sourcepath>
	<pathelement path="http"/>
      </sourcepath>
      <sourcepath>
	<pathelement path="float"/>
      </sourcepath>
      <sourcepath>
	<pathelement path="HeclBuilder"/>
      </sourcepath>
      <sourcepath>
	<pathelement path="jarhack"/>
      </sourcepath>
    </javadoc>
  </target>

  <target name="docbookresolve">
    <exec executable="xmllint" output="docs/hecl-processed.xml" error="docs/processing-errors.txt">
      <arg value="--xinclude" />
      <arg value="docs/hecl.xml" />
    </exec>
  </target>

  <target name="docbook" depends="docbookresolve">
    <exec executable="xsltproc">
      <arg value="--nonet" />
      <arg value="--stringparam" />
      <arg value="html.stylesheet" />
      <arg value="hecl.css" />
      <arg value="--stringparam"/>
      <arg value="generate.section.toc.level"/>
      <arg value="5"/>
      <!-- 5 is likely higher than we will need. -->
      <arg value="-o"/>
      <arg value="docs/" />
      <arg value="docs/chunk.xsl" />
      <arg value="docs/hecl-processed.xml" />
    </exec>
  </target>

  <target name="docs" depends="javadocs,docbook">
  </target>


  <target name="HeclBuilder" depends="packageCommandline,
      packageJarHack">
    <mkdir dir="build/heclbuilder" />
    <javac srcdir="HeclBuilder" destdir="build/heclbuilder">
      <classpath refid="classpath" />
      <classpath path="HeclBuilder/swing-layout-1.0.jar" />
      <classpath path="Hecl.jar" />
      <classpath path="JarHack.jar" />
    </javac>
  </target>

  <target name="HeclBuilderJar" depends="HeclBuilder,midlet">
    <jar destfile="HeclBuilder.jar" basedir="build/heclbuilder">
      <manifest>
	<attribute name="Main-Class" value="heclbuilder/HeclBuilderGui" />
      </manifest>

      <zipfileset src="HeclBuilder/swing-layout-1.0.jar"
      includes="org/jdesktop/layout/*.class"/>
      <zipfileset src="JarHack.jar" includes="jarhack/*.class"/>
      <zipfileset src="Hecl.jar" includes="org/hecl/*.class"/>
      <zipfileset src="Hecl.jar" includes="org/hecl/files/*.class"/>
      <zipfileset src="Hecl.jar" includes="org/hecl/fp/*.class"/>
      <zipfileset src="Hecl.jar" includes="org/hecl/load/*.class"/>
    </jar>

    <jar destfile="HeclBuilder.jar" basedir="." includes="j2me/Hecl.jar"
      update="true" />
  </target>

</project>
